@using Microsoft.AspNetCore.Identity
@using WebAppCheck.Areas.Identity.Data

@inject SignInManager<WebAppUser> SignInManager
@inject UserManager<WebAppUser> UserManager

@{
    // Get the current page
    var currentPage = ViewContext.ActionDescriptor.DisplayName;
    // Check if the current page is not login or register
    var isNotLoginOrRegisterPage = !currentPage.Contains("/Account/Login") && !currentPage.Contains("/Account/Register");
}


<ul class="navbar-nav ">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item active">
        <a id="manage" class="nav-link text-white btn btn-primary" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
        </form>
    </li>
}
else if (isNotLoginOrRegisterPage)
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
